/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/pocket101.xml
 */
package sul.protocol.pocket101.play;

import java.nio.charset.StandardCharsets;
import java.util.Arrays;

import sul.utils.*;

public class ServerHandshake extends Packet {

	public static final byte ID = (byte)3;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = false;

	public String serverPublicKey;
	public byte[] token;

	public ServerHandshake() {}

	public ServerHandshake(String serverPublicKey, byte[] token) {
		this.serverPublicKey = serverPublicKey;
		this.token = token;
	}

	@Override
	public int length() {
		return Buffer.varuintLength(serverPublicKey.getBytes(StandardCharsets.UTF_8).length) + serverPublicKey.getBytes(StandardCharsets.UTF_8).length + Buffer.varuintLength(token.length) + token.length + 1;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		byte[] c2vydmvyuhvibglj=serverPublicKey.getBytes(StandardCharsets.UTF_8); this.writeVaruint((int)c2vydmvyuhvibglj.length); this.writeBytes(c2vydmvyuhvibglj);
		this.writeVaruint((int)token.length); this.writeBytes(token);
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		int bgvuc2vydmvyuhvi=this.readVaruint(); serverPublicKey=new String(this.readBytes(bgvuc2vydmvyuhvi), StandardCharsets.UTF_8);
		int bhrva2vu=this.readVaruint(); token=this.readBytes(bhrva2vu);
	}

	public static ServerHandshake fromBuffer(byte[] buffer) {
		ServerHandshake ret = new ServerHandshake();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "ServerHandshake(serverPublicKey: " + this.serverPublicKey + ", token: " + Arrays.toString(this.token) + ")";
	}

}
