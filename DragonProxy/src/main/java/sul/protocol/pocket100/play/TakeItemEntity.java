/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/pocket100.xml
 */
package sul.protocol.pocket100.play;

import sul.utils.*;

public class TakeItemEntity extends Packet {

	public static final byte ID = (byte)18;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = false;

	public long taken;
	public long collector;

	public TakeItemEntity() {}

	public TakeItemEntity(long taken, long collector) {
		this.taken = taken;
		this.collector = collector;
	}

	@Override
	public int length() {
		return Buffer.varlongLength(taken) + Buffer.varlongLength(collector) + 1;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeVarlong(taken);
		this.writeVarlong(collector);
		return this._buffer;
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		taken=this.readVarlong();
		collector=this.readVarlong();
	}

	public static TakeItemEntity fromBuffer(byte[] buffer) {
		TakeItemEntity ret = new TakeItemEntity();
		ret.decode(buffer);
		return ret;
	}

}
