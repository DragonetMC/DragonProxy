/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/pocket100.xml
 */
package sul.protocol.pocket100.play;

import sul.utils.*;

public class FullChunkData extends Packet {

	public static final byte ID = (byte)58;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = false;

	public Tuples.IntXZ position;
	public byte[] data;
	public byte[] tiles;

	public FullChunkData() {}

	public FullChunkData(Tuples.IntXZ position, byte[] data, byte[] tiles) {
		this.position = position;
		this.data = data;
		this.tiles = tiles;
	}

	@Override
	public int length() {
		return Buffer.varintLength(position.x) + Buffer.varintLength(position.z) + Buffer.varuintLength(data.length) + data.length + Buffer.varuintLength(tiles.length) + tiles.length + 1;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeVarint(position.x); this.writeVarint(position.z);
		this.writeVaruint((int)data.length); this.writeBytes(data);
		this.writeVaruint((int)tiles.length); this.writeBytes(tiles);
		return this._buffer;
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		position.x=this.readVarint(); position.z=this.readVarint();
		int bgrhdge=this.readVaruint(); data=this.readBytes(bgrhdge);
		int bhrpbgvz=this.readVaruint(); tiles=this.readBytes(bhrpbgvz);
	}

	public static FullChunkData fromBuffer(byte[] buffer) {
		FullChunkData ret = new FullChunkData();
		ret.decode(buffer);
		return ret;
	}

}
