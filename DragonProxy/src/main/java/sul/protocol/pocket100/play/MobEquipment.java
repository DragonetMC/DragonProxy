/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/pocket100.xml
 */
package sul.protocol.pocket100.play;

import sul.utils.*;

/**
 * Sent when the client puts an item in its hotbar or selects a new hotbar slot.
 */
public class MobEquipment extends Packet {

	public static final byte ID = (byte)32;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = true;

	public long entityId;
	public sul.protocol.pocket100.types.Slot item;

	/**
	 * Slot of the inventory where the item is. The hotbat slots (0-8) are not counted.
	 * 255 means that a generic empty slot has been selected.
	 */
	public byte inventorySlot;

	/**
	 * Slot of the hotbar where the item is being moved.
	 */
	public byte hotbarSlot;
	public byte unknown4;

	public MobEquipment() {}

	public MobEquipment(long entityId, sul.protocol.pocket100.types.Slot item, byte inventorySlot, byte hotbarSlot, byte unknown4) {
		this.entityId = entityId;
		this.item = item;
		this.inventorySlot = inventorySlot;
		this.hotbarSlot = hotbarSlot;
		this.unknown4 = unknown4;
	}

	@Override
	public int length() {
		return Buffer.varlongLength(entityId) + item.length() + 4;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeVarlong(entityId);
		this.writeBytes(item.encode());
		this.writeBigEndianByte(inventorySlot);
		this.writeBigEndianByte(hotbarSlot);
		this.writeBigEndianByte(unknown4);
		return this._buffer;
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		entityId=this.readVarlong();
		item=new sul.protocol.pocket100.types.Slot(); item._index=this._index; item.decode(this._buffer); this._index=item._index;
		inventorySlot=readBigEndianByte();
		hotbarSlot=readBigEndianByte();
		unknown4=readBigEndianByte();
	}

	public static MobEquipment fromBuffer(byte[] buffer) {
		MobEquipment ret = new MobEquipment();
		ret.decode(buffer);
		return ret;
	}

}
